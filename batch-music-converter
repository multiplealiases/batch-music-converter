#!/usr/bin/env bash

set -o nounset
set -o errexit

function usage() {
    echo "Usage: batch-music-converter [options] <input directory> <output directory>"
}

function banner() {
    echo Scuffed batch music conversion tool
}

function help_text(){
    cat << EOF
$(banner)
$(usage)

Defaults shown in [].
-b, --bitrate        bitrate to convert to [196k]
-c, --codec          codec to convert to [libopus]
-e, --extension      file extension [ogg]
-i, --interactive    interactive confirmation
-j, --jobs           number of parallel processes [$(nproc)]
-p, --strip          strip this many path components [1]
-h, --help           this help
EOF
}

function valid_dir() {
    if [[ -z "$1" ]]
    then
        usage
        exit 4
    elif [[ $# -gt 1 ]]
    then
        cat << EOF
Edge case: How did more than one arg get into valid_dir?
I saw: $@
EOF
        exit 5
    elif [[ ! -d "$1" ]]
    then
        printf "'%s': is not directory\n" "$1"
        exit 3
    elif [[ ! -e "$1" ]]
    then
        printf "'%s': directory does not exist\n" "$1"
        exit 2
    fi
}

function valid_noclobber() {
    if [[ -z "$1" ]]
    then
        echo 'A second argument (output directory) is needed.'
        exit 6
    elif [[ $# -gt 1 ]]
    then
        cat << EOF
Edge case: How did more than one arg get into valid_noclobber?
I saw: $@
EOF
        exit 7
    elif [[ -e "$1" ]]
    then
        printf "'%s': file exists\n" "$1"
        printf "Please move or delete '%s'\n" "$1"
        exit 8
    fi
}

function cleanup() {
    rm "$input_filelist" "$output_filelist" "$dirlist"
}

ARGS="$(getopt --options h,b:,c:,e:,i,j:,p: --long help,bitrate:,codec:,extension:,interactive,jobs:,strip: -- "$@")"
eval set -- "$ARGS"
while true
do
    case "$1" in
    -h | --help)
        help_text
        exit 1
        ;;
    -c | --codec)
        codec="$2"
        shift 2
        ;;
    -b | --bitrate)
        bitrate="$2"
        shift 2
        ;;
    -e | --extension)
        extension="$2"
        shift 2
        ;;
    -i | --interactive)
        interactive="y"
        shift
        ;;
    -j | --jobs)
        jobs="$2"
        shift 2
        ;;
    -p | --strip)
        strip="$2"
        shift 2
        ;;
    --)
        set +o nounset
            valid_dir "$2"
            valid_noclobber "$3"
        set -o nounset
        input_prefix="$2"
        output_prefix="$3"
        break
        ;;
    esac
done

bitrate="${bitrate:-196k}"
codec="${codec:-libopus}"
jobs="${jobs:-$(nproc)}"
extension="${extension:-ogg}"
strip="${strip:-1}"
interactive="${interactive:-n}"

input_filelist="$(mktemp)"
output_filelist="$(mktemp)"
dirlist="$(mktemp)"

trap 'cleanup' ERR EXIT

find "$input_prefix" -type f -print0 > "$input_filelist"
< "$input_filelist" cut -zd / -f "$(( 1 + strip ))"- | xargs -I{} -0 printf '%s/%s\0' "$output_prefix" {} > "$output_filelist"
find "$input_prefix" -type d -print0 | cut -zd / -f "$(( 1 + strip ))"- | xargs -I{} -0 printf '%s/%s\0' "$output_prefix" {} > "$dirlist"

if [[ $interactive == 'y' ]]
then
    echo 'Your converted music will reside in locations like:'
    parallel -0 echo \{.\}."$extension" :::: <(shuf -zn 5 "$output_filelist")
    printf '%s files will be converted.\n' "$(tr '\0' '\n' < $output_filelist | wc -l)"
    read -rp "Would you like to proceed? (y/N) " response

    case "$response" in
        y | Y) echo 'Proceeding...' ;;
        n | N) echo 'Exiting.'; exit 9 ;;
        *) echo "I'm choosing to read that as 'n'. Exiting."; exit 9 ;;
    esac
fi

xargs -0 -I{} mkdir -p {} < "$dirlist"
parallel -0 --link -j"$jobs" \
ffmpeg -hide_banner -loglevel error -i {1} -c:a "$codec" -b:a "$bitrate" {2.}."$extension" \
:::: "$input_filelist" :::: "$output_filelist"
